

Verify more parameters & returns, files/directories existing, Mutants/Giants existing, etc.


Improve the save file choosing UI to default to the most recently modified .zxsav in the given saves directory?

Provide an option to stop the Reflector as often as possible, requiring restarting it between uses during a single usage of TABSAT? Would also need to split out stop/start and deploy/delete in ReflectorManager.


Refactor TABSAT's own Console...WriteLine() to use a UI textfield/list, at the bottom of the UI/on another pane?


Would TABReflector need to technically be a graphical application, with a hidden window, in order for Process.WaitForInputIdle() to best solve the Sleep() race condition?


----

Options for Mutant modification/max % restoration:

Delete all mutants.

Relocate mutants onto giants:
nearest giant per mutant;
giant furthest from CC;
giant furthest from CC within cardinal map quarter (divide diagonally), if non in quadrant find next nearest/furthest from CC globally?

Relocate mutants onto smaller zombies at the map edge/at least l distance from the CC? Less likely to avoid terrain clipping than relocating onto giants.

Replace all mutants with smaller zombies. Harpies?


----

Wide-ranging editor options:

Adjust zombie type ratios for even harder procedurally-generated maps.
Potentially also increase the % score scale factor for such maps?

Without needing to generate new zombie IDs, we could just swap the locations of different types to affect distribution difficulty. Depends upon generating LevelFastSerializedEntities?

Set <Simple name="ShowFullMap"... true to effectively give Beholder for free.
Modify <Simple name="LayerFog"... to potentially reveal all terrain but not zombies?

----

Other features:

Use a series of auto-backed-up saves during a game to chart the player's economy, pause ratio, zombie kill rate, potential turret & army dps, etc.

